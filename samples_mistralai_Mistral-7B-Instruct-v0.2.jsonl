{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    def find_group(paren_string, result):\n        if not paren_string:\n            return result\n\n        open_paren = paren_string[0]\n        paren_string = paren_string[1:]\n\n        if open_paren == '(':\n            find_group(paren_string, find_group(paren_string, result + ['()']))\n        else:\n            find_group(paren_string, result)\n\n            if not result or result[-1] != '(' or result[-1][0] != open_paren:\n                result.pop()\n\n            result.pop()\n\n    result = []\n    find_group(paren_string, result)\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, return the decimal part of the number.\n\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    account_balance = 0\n    for operation in operations:\n        account_balance += operation\n        if account_balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    # Step 1: Find the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Step 2: Calculate the absolute difference between each number and the mean\n    absolute_differences = [abs(num - mean) for num in numbers]\n\n    # Step 3: Find the average of these absolute differences\n    mad = sum(absolute_differences) / len(numbers)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nesting(sub_string):\n        count = 0\n        for char in sub_string:\n            count += 1 if char == '(' else (1 if char == ')' else -1)\n        return count\n\n    sub_expressions = paren_string.split()\n    return [count_nesting(sub_string) for sub_string in sub_expressions]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n\n    :param strings: List of strings\n    :param substring: Substring to filter by\n    :return: List of strings that contain the given substring\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "sum_product = lambda numbers: (sum(numbers) if numbers else (0, 1)), (1 if not numbers else reducer(1, numbers)) if numbers else (1, 1)\n\ndef reducer(accumulator, number):\n return accumulator * number\n\n# Test cases\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4]))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(max(num, result[-1]))\n\n    return result"}
